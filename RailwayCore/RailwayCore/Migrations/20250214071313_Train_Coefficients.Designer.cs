// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RailwayCore.Context;

#nullable disable

namespace RailwayCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250214071313_Train_Coefficients")]
    partial class Train_Coefficients
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RailwayCore.Models.PassengerCarriage", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<bool>("Air_Conditioning")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Appearence")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("In_Current_Use")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_For_Train_Chief")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_Inclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int?>("Production_Year")
                        .HasColumnType("int");

                    b.Property<string>("Quality_Class")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("Renewal_Fact")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Renewal_Info")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("Renewal_Performer")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int?>("Renewal_Year")
                        .HasColumnType("int");

                    b.Property<bool>("Shower_Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("Station_Depot_Id")
                        .HasColumnType("int");

                    b.Property<string>("Type_Of")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Station_Depot_Id");

                    b.ToTable("Passenger_Carriage", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.PassengerCarriageOnTrainRouteOnDate", b =>
                {
                    b.Property<string>("Passenger_Carriage_Id")
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Train_Route_On_Date_Id")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("Factual_Air_Conditioning")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Factual_Is_Inclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Factual_Shower_Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Food_Availability")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_For_Children")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Is_For_Woman")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Position_In_Squad")
                        .HasColumnType("int");

                    b.HasKey("Passenger_Carriage_Id", "Train_Route_On_Date_Id");

                    b.HasIndex("Train_Route_On_Date_Id");

                    b.ToTable("Passenger_Carriage_On_Train_Route_On_Date", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.RailwayBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Office_Location")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Railway_Branch", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Carriage_Depot")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Location")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Locomotive_Depot")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Railway_Branch_Id")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .HasColumnType("longtext");

                    b.Property<string>("Register_Id")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Type_Of")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Railway_Branch_Id");

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.TicketBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Booking_Time")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Ending_Station_Id")
                        .HasColumnType("int");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Passenger_Carriage_Id")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Passenger_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Passenger_Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Place_In_Carriage")
                        .HasColumnType("int");

                    b.Property<int>("Starting_Station_Id")
                        .HasColumnType("int");

                    b.Property<string>("Train_Route_On_Date_Id")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Ending_Station_Id");

                    b.HasIndex("Passenger_Carriage_Id");

                    b.HasIndex("Starting_Station_Id");

                    b.HasIndex("Train_Route_On_Date_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("Ticket_Booking", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.TicketInSelling", b =>
                {
                    b.Property<string>("Train_Route_On_Date_Id")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Passenger_Carriage_Id")
                        .HasColumnType("varchar(8)");

                    b.Property<int>("Starting_Station_Id")
                        .HasColumnType("int");

                    b.Property<int>("Ending_Station_Id")
                        .HasColumnType("int");

                    b.Property<double>("Extra_Coefficient")
                        .HasColumnType("double");

                    b.HasKey("Train_Route_On_Date_Id", "Passenger_Carriage_Id", "Starting_Station_Id", "Ending_Station_Id");

                    b.HasIndex("Ending_Station_Id");

                    b.HasIndex("Passenger_Carriage_Id");

                    b.HasIndex("Starting_Station_Id");

                    b.ToTable("Ticket_In_Selling", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRoute", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Assignement_Type")
                        .HasColumnType("longtext");

                    b.Property<string>("Branded_Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Frequency_Type")
                        .HasColumnType("longtext");

                    b.Property<bool>("Is_Branded")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Quality_Class")
                        .HasColumnType("longtext");

                    b.Property<int?>("Railway_Branch_Id")
                        .HasColumnType("int");

                    b.Property<string>("Speed_Type")
                        .HasColumnType("longtext");

                    b.Property<int?>("Train_Route_Coefficient")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Railway_Branch_Id");

                    b.ToTable("Train_Route", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRouteOnDate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateOnly>("Departure_Date")
                        .HasColumnType("date");

                    b.Property<int?>("Train_Race_Coefficient")
                        .HasColumnType("int");

                    b.Property<string>("Train_Route_Id")
                        .IsRequired()
                        .HasColumnType("varchar(8)");

                    b.HasKey("Id");

                    b.HasIndex("Train_Route_Id");

                    b.ToTable("Train_Route_On_Date", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRouteOnDateOnStation", b =>
                {
                    b.Property<string>("Train_Route_On_Date_Id")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Station_Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Arrival_Time")
                        .HasColumnType("DATETIME(0)");

                    b.Property<DateTime?>("Departure_Time")
                        .HasColumnType("DATETIME(0)");

                    b.Property<double?>("Distance_From_Starting_Station")
                        .HasColumnType("double");

                    b.Property<double?>("Speed_On_Section")
                        .HasColumnType("double");

                    b.Property<string>("Stop_Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Train_Route_On_Date_Id", "Station_Id");

                    b.HasIndex("Station_Id");

                    b.ToTable("Train_Route_On_Date_On_Station", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("RailwayCore.Models.PassengerCarriage", b =>
                {
                    b.HasOne("RailwayCore.Models.Station", "Station_Depot")
                        .WithMany("Carriages_In_Depot")
                        .HasForeignKey("Station_Depot_Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Passenger_Carriage@Station_Depot$FK");

                    b.Navigation("Station_Depot");
                });

            modelBuilder.Entity("RailwayCore.Models.PassengerCarriageOnTrainRouteOnDate", b =>
                {
                    b.HasOne("RailwayCore.Models.PassengerCarriage", "Passenger_Carriage")
                        .WithMany("Carriage_Assignements")
                        .HasForeignKey("Passenger_Carriage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Passenger_Carriage_On_Train_Route_On_Date@Passenger_Carriage$FK");

                    b.HasOne("RailwayCore.Models.TrainRouteOnDate", "Train_Route_On_Date")
                        .WithMany("Carriage_Assignements")
                        .HasForeignKey("Train_Route_On_Date_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Passenger_Carriage_On_Train_Route_On_Date@Train_Route_On_Date$FK");

                    b.Navigation("Passenger_Carriage");

                    b.Navigation("Train_Route_On_Date");
                });

            modelBuilder.Entity("RailwayCore.Models.Station", b =>
                {
                    b.HasOne("RailwayCore.Models.RailwayBranch", "Railway_Branch")
                        .WithMany("Stations")
                        .HasForeignKey("Railway_Branch_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Station@Railway_Branch$FK");

                    b.Navigation("Railway_Branch");
                });

            modelBuilder.Entity("RailwayCore.Models.TicketBooking", b =>
                {
                    b.HasOne("RailwayCore.Models.Station", "Ending_Station")
                        .WithMany("Ticket_Bookings_With_Station_As_Ending")
                        .HasForeignKey("Ending_Station_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_Booking@Ending_Station$FK");

                    b.HasOne("RailwayCore.Models.PassengerCarriage", "Passenger_Carriage")
                        .WithMany("Ticket_Bookings")
                        .HasForeignKey("Passenger_Carriage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_Booking@Passenger_Carriage$FK");

                    b.HasOne("RailwayCore.Models.Station", "Starting_Station")
                        .WithMany("Ticket_Bookings_With_Station_As_Starting")
                        .HasForeignKey("Starting_Station_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_Booking@Starting_Station$FK");

                    b.HasOne("RailwayCore.Models.TrainRouteOnDate", "Train_Route_On_Date")
                        .WithMany("Ticket_Bookings")
                        .HasForeignKey("Train_Route_On_Date_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_Booking@Train_Route_On_Date$FK");

                    b.HasOne("RailwayCore.Models.User", "User")
                        .WithMany("Ticket_Bookings")
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_Booking@User$FK");

                    b.Navigation("Ending_Station");

                    b.Navigation("Passenger_Carriage");

                    b.Navigation("Starting_Station");

                    b.Navigation("Train_Route_On_Date");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RailwayCore.Models.TicketInSelling", b =>
                {
                    b.HasOne("RailwayCore.Models.Station", "Ending_Station")
                        .WithMany("Opened_Tickets_With_Station_As_Ending")
                        .HasForeignKey("Ending_Station_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_In_Selling@Ending_Station$FK");

                    b.HasOne("RailwayCore.Models.PassengerCarriage", "Passenger_Carriage")
                        .WithMany("Opened_Tickets")
                        .HasForeignKey("Passenger_Carriage_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_In_Selling@Passenger_Carriage$FK");

                    b.HasOne("RailwayCore.Models.Station", "Starting_Station")
                        .WithMany("Opened_Tickets_With_Station_As_Starting")
                        .HasForeignKey("Starting_Station_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_In_Selling@Starting_Station$FK");

                    b.HasOne("RailwayCore.Models.TrainRouteOnDate", "Train_Route_On_Date")
                        .WithMany("Opened_Tickets")
                        .HasForeignKey("Train_Route_On_Date_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Ticket_In_Selling@Train_Route_On_Date$FK");

                    b.Navigation("Ending_Station");

                    b.Navigation("Passenger_Carriage");

                    b.Navigation("Starting_Station");

                    b.Navigation("Train_Route_On_Date");
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRoute", b =>
                {
                    b.HasOne("RailwayCore.Models.RailwayBranch", "Railway_Branch")
                        .WithMany("Train_Routes")
                        .HasForeignKey("Railway_Branch_Id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("Train_Route@Railway_Branch$FK");

                    b.Navigation("Railway_Branch");
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRouteOnDate", b =>
                {
                    b.HasOne("RailwayCore.Models.TrainRoute", "Train_Route")
                        .WithMany("Train_Assignements")
                        .HasForeignKey("Train_Route_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Train_Route_On_Date@Train_Route$FK");

                    b.Navigation("Train_Route");
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRouteOnDateOnStation", b =>
                {
                    b.HasOne("RailwayCore.Models.Station", "Station")
                        .WithMany("Train_Stops")
                        .HasForeignKey("Station_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Train_Route_On_Date_On_Station@Station$FK");

                    b.HasOne("RailwayCore.Models.TrainRouteOnDate", "Train_Route_On_Date")
                        .WithMany("Train_Stops")
                        .HasForeignKey("Train_Route_On_Date_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Train_Route_On_Date_On_Station@Train_Route_On_Date$FK");

                    b.Navigation("Station");

                    b.Navigation("Train_Route_On_Date");
                });

            modelBuilder.Entity("RailwayCore.Models.PassengerCarriage", b =>
                {
                    b.Navigation("Carriage_Assignements");

                    b.Navigation("Opened_Tickets");

                    b.Navigation("Ticket_Bookings");
                });

            modelBuilder.Entity("RailwayCore.Models.RailwayBranch", b =>
                {
                    b.Navigation("Stations");

                    b.Navigation("Train_Routes");
                });

            modelBuilder.Entity("RailwayCore.Models.Station", b =>
                {
                    b.Navigation("Carriages_In_Depot");

                    b.Navigation("Opened_Tickets_With_Station_As_Ending");

                    b.Navigation("Opened_Tickets_With_Station_As_Starting");

                    b.Navigation("Ticket_Bookings_With_Station_As_Ending");

                    b.Navigation("Ticket_Bookings_With_Station_As_Starting");

                    b.Navigation("Train_Stops");
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRoute", b =>
                {
                    b.Navigation("Train_Assignements");
                });

            modelBuilder.Entity("RailwayCore.Models.TrainRouteOnDate", b =>
                {
                    b.Navigation("Carriage_Assignements");

                    b.Navigation("Opened_Tickets");

                    b.Navigation("Ticket_Bookings");

                    b.Navigation("Train_Stops");
                });

            modelBuilder.Entity("RailwayCore.Models.User", b =>
                {
                    b.Navigation("Ticket_Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
